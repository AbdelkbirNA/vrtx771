const { GoogleGenAI } = require("@google/genai");
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();
const ai = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY,
});

async function generateContent(req, res) {
  try {
    const { text: userInput, userId } = req.body;
    if (!userInput) {
      return res.status(400).json({ error: 'Missing "text" in request body' });
    }

    const model = "gemini-2.5-pro";
    const tools = [];
    const config = { thinkingConfig: { thinkingBudget: -1 } };

    const prompt = `Tu es **OrnoAI**, l‚Äôassistant intelligent sp√©cialis√© en botanique int√©gr√© √† la plateforme **OrnoPlante**.

    üéØ **Ta mission** : Fournir des r√©ponses expertes, claires et bienveillantes sur les plantes, adapt√©es √† une interface web.
    
    üß† **Instructions g√©n√©rales** :
    - R√©ponds uniquement aux questions li√©es aux **plantes, leur entretien, maladies, arrosage, rem√®des naturels**, etc.
    - Sois **concis, p√©dagogique et accessible**, quel que soit le niveau de l‚Äôutilisateur.
    - **Ne pas r√©pondre aux questions hors sujet.**
    
    üí° **Style de r√©ponse** :
    - Utilise le **gras** pour les mots-cl√©s, titres ou points essentiels (**ex : Sympt√¥me probable**, **Conseils d‚Äôentretien**, etc.)
    - Utilise des **listes √† puces** (- ) pour pr√©senter les conseils clairement
    - Termine par une phrase d‚Äôencouragement ou de suivi (ex. *N'h√©site pas √† revenir si le probl√®me persiste !*)
    
    üìå **Tu peux :**
    - Diagnostiquer les probl√®mes de plantes √† partir des sympt√¥mes d√©crits
    - Donner des conseils adapt√©s √† l‚Äôesp√®ce et au niveau d‚Äôexp√©rience de l‚Äôutilisateur
    - Proposer des rem√®des naturels ou des astuces pratiques
    - Rediriger vers des fiches plantes (si pertinent)
    
    Voici la question de l‚Äôutilisateur :  
    **${userInput}**`;

    const contents = [
      {
        role: "user",
        parts: [{ text: prompt }],
      },
    ];
    const responseStream = await ai.models.generateContentStream({
      model,
      config,
      contents,
    });

    let fullResponse = "";
    for await (const chunk of responseStream) {
      fullResponse += chunk.text;
    }

    // Enregistrer la question et la r√©ponse dans la base de donn√©es
    if (userId) {
      await prisma.chatbotQuestion.create({
        data: {
          user_id: userId,
          question_text: userInput,
          answer_text: fullResponse,
          question_date: new Date(),
          used_in_faq: false,
        },
      });
    }

    res.json({ response: fullResponse });
  } catch (error) {
    console.error("Error generating content:", error);
    res.status(500).json({ error: "Failed to generate content" });
  }
}



module.exports = { generateContent };
